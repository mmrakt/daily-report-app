// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  customId      String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  profile       String?
  avatarUrl     String?
  role          Role?      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId        Int?
  tasks         Task[]
  accounts      Account[]
  sessions      Session[]
}

model Role {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  name       String
  status     Status              @default(enable)
  users      User[]
  categories CategoriesOnRoles[]
  projects   ProjectsOnRoles[]
}

// NOTE: @db.Date だとmigrateが失敗するので一旦stringにしておく
model Task {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  summary    String
  note       String?
  date       String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  hours      Float
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  Int
}

model Category {
  id        Int                 @id @default(autoincrement())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  name      String
  status    Status              @default(enable)
  tasks     Task[]
  roles     CategoriesOnRoles[]
}

model Project {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name      String
  status    Status            @default(enable)
  tasks     Task[]
  roles     ProjectsOnRoles[]
}

model CategoriesOnRoles {
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([categoryId, roleId])
}

model ProjectsOnRoles {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([projectId, roleId])
}

enum Status {
  enable
  disable
}
