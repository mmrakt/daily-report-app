// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model User {
  id            Int       @id @default(autoincrement())
  customId      String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  profile       String?
  avatarUrl     String?
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        Int
  tasks         Task[]
}

model Role {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  name       String
  users      User[]
  categories CategoriesOnRoles[]
  projects   ProjectsOnRoles[]
}

// NOTE: @db.Date だとmigrateが失敗するので一旦stringにしておく
model Task {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  summary    String
  note       String?
  date       String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  hours      Float
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
}

model Category {
  id        Int                 @id @default(autoincrement())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  name      String
  tasks     Task[]
  roles     CategoriesOnRoles[]
}

model Project {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name      String
  tasks     Task[]
  roles     ProjectsOnRoles[]
}

model CategoriesOnRoles {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([categoryId, roleId])
}

model ProjectsOnRoles {
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([projectId, roleId])
}
